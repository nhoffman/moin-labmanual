#!/usr/bin/env ansible-playbook -i install/hosts

# Server configuration for a MoinMoin wiki farm (Ubuntu 14.04).

# LanguageSetup: note that this script does not install
# language-specific pages to the underlay. To do this, log in as a
# superuser and either follow links in the LanguageSetup page or go
# execute the appropriate action via a url such as
# http://ubuntu1/foo/LanguageSetup?action=language_setup&target=English--essential_system_pages.zip&language=English
# Installation of the underlay via any individual wiki provides the
# underlay data to all members of the farm.
#
# useful links:
# - https://moinmo.in/HowTo/UbuntuFarm

- hosts: localhost
  become: no

  tasks:
    - fail: msg="ansible version is {{ ansible_version['full'] }}, requires >= 2.0"
      when: "{{ ansible_version['full'] | version_compare('2.0', '<') }}"
      tags:
        - always
        - ansible-version

    - name: clean up dist directory
      file: path=dist state=absent
      tags:
        - moinlm

    - name: build tarball for this package
      command: python setup.py sdist
      tags:
        - moinlm

    - name: compile pages for installation to the wiki
      command: ./moinlm.py package pages -z dist/000-moinlm-pages.zip
      tags:
        - pages

- hosts: web_host
  become: yes

  vars:
    SERVER_NAME: 54.189.60.200
    SITE: moinmoin
    WIKI_USER: moinmoin
    WWW_USER: www-data
    MOIN_VERSION: 1.9.8
    XAPIAN_VERSION: 1.2.16  # must match version of xapian in apt
    VENV_HOME: /usr/local/share/virtualenvs
    VENV_BASE: "{{ VENV_HOME }}/base-env"
    VENV: "{{ VENV_HOME }}/moin-{{ MOIN_VERSION }}-env"
    SITE_DIR: "/var/www/{{ SITE }}"
    STATIC_DIR: "/var/www/{{ SITE }}-static"
    WSGI_FILE: moin.wsgi
    DATA_DIR: "/home/{{ SITE }}"
    SRC_DIR: "{{ DATA_DIR }}/src"
    WIKI_NAMES:
      - sandbox
    # TODO: put in secrets
    MOIN_SU_NAME: SuperUser
    MOIN_SU_PASSWORD: foobar

  tasks:
  - name: update apt
    apt: update_cache=yes cache_valid_time=600
    tags:
      - system

  - name: install system packages
    apt: pkg={{ item }}
    with_items:
      - apache2
      - libapache2-mod-wsgi
      - python-pip
      - tree

  - name: install build dependencies
    command: apt-get build-dep -y {{ item }}
    with_items:
      - python-xapian

  - name: install python packages
    pip: name={{item}} state=latest
    with_items:
      - pip
      - virtualenv
      - wheel

  - name: create directories
    file: path={{ item }} state=directory owner=root group=root mode=755
    with_items:
      - "{{ VENV_HOME }}"
      - "{{ SITE_DIR }}"
      - "{{ STATIC_DIR }}"
      - "{{ DATA_DIR }}"
      - "{{ SRC_DIR }}"

  - name: create virtualenvs
    command: virtualenv {{ item }}
    with_items:
      - "{{ VENV_BASE }}"
      - "{{ VENV }}"

  - name: install moinmoin and other dependencies to the virtualenv
    pip: virtualenv={{ VENV }} name={{item}}
    with_items:
      - "moin=={{ MOIN_VERSION }}"

  - name: create wiki user to house wiki data and config
    user: name={{ WIKI_USER }} shell=/bin/false

  # xapian and python bindings
  - name: check if xapian is installed
    command: "{{ VENV }}/bin/python -c 'import xapian'"
    register: check_xapian
    ignore_errors: True

  - name: download xapian language bindings
    get_url: url=http://oligarchy.co.uk/xapian/{{ XAPIAN_VERSION }}/xapian-bindings-{{ XAPIAN_VERSION }}.tar.xz
             dest={{ SRC_DIR }}
    when: check_xapian|failed

  - name: expand xapian language bindings tarball
    unarchive: copy=no src={{ SRC_DIR }}/xapian-bindings-{{ XAPIAN_VERSION }}.tar.xz
               dest={{ SRC_DIR }}
               creates={{ SRC_DIR }}/xapian-bindings-{{ XAPIAN_VERSION }}
    when: check_xapian|failed

  - name: install xapian language bindings
    shell: "cd {{ SRC_DIR }}/xapian-bindings-{{ XAPIAN_VERSION }}; {{ item }}"
    with_items:
      - "PYTHON={{ VENV }}/bin/python ./configure --with-python"
      - make
      - "make install"
    when: check_xapian|failed

  # web assets
  - name: copy static assets from installed python package
    command: cp -r {{ VENV }}/lib/python2.7/site-packages/MoinMoin/web/static/htdocs \
             {{ STATIC_DIR }}

  # per-wiki assets and configuration
  - name: web-accessible directory for each wiki
    file: path="{{ SITE_DIR }}/{{ item }}"
          state=directory owner=root group=root mode=755
    with_items: "{{ WIKI_NAMES }}"

  - name: wsgi script for each wiki
    template: src=templates/{{ WSGI_FILE }}
              dest={{ SITE_DIR }}/{{ item }}/{{ WSGI_FILE }} mode=644
    with_items: "{{ WIKI_NAMES }}"
    notify:
      - restart apache

  - name: apache config for site
    template: src=templates/site.conf
              dest=/etc/apache2/sites-available/{{ SITE }}.conf
              mode=644
    notify:
      - enable sites
      - restart apache
    tags:
      - apache-config

  - name: apache config for each wiki
    template: src=templates/mywiki.conf
              dest=/etc/apache2/sites-available/{{ item }}.conf
              mode=644
    with_items: "{{ WIKI_NAMES }}"
    notify:
      - enable sites
      - restart apache
    tags:
      - apache-config

  ### wiki data and config ###
  - name: create data subdirectory for each wiki
    file: path="{{ DATA_DIR }}/{{ item }}"
          state=directory owner=root group=root mode=755
    with_items: "{{ WIKI_NAMES }}"

  - name: create a common underlay directory
    command: rsync -a {{ VENV }}/share/moin/underlay {{ DATA_DIR }}
    tags:
      - data-setup

  - name: set up data directory structure for each wiki
    command: rsync -a {{ VENV }}/share/moin/data {{ DATA_DIR }}/{{ item }}
             --exclude=*-log
    with_items: "{{ WIKI_NAMES }}"
    tags:
      - data-setup
    notify:
      - fix ownership of data dirs
      - restart apache

  - name: install farmconfig.py
    template: src=templates/farmconfig.py dest={{ DATA_DIR }}/farmconfig.py
    notify:
      - fix ownership of data dirs
      - restart apache
    tags:
      - wiki-config
      - moinlm

  - name: install config file to data dir for each wiki
    template: src=templates/mywiki.py dest={{ DATA_DIR }}/{{ item }}.py
    with_items: "{{ WIKI_NAMES }}"
    tags:
      - wiki-config
    notify:
      - fix ownership of data dirs
      - restart apache

  ### install moinlm ###
  - name: register file name of tarball
    local_action: shell basename $(ls -t dist/moinlm*.gz | head -1)
    register: TARBALL
    become: no
    tags:
      - moinlm

  - name: upload tarball
    copy: src=../dist/{{ TARBALL.stdout_lines[0] }}
          dest={{ SRC_DIR }}/{{ TARBALL.stdout_lines[0] }}
          owner={{ WWW_USER }} group={{ WWW_USER }} mode=664
    tags:
      - moinlm

  - name: expand tarball
    command: chdir={{ SRC_DIR }} tar -xf {{ TARBALL.stdout_lines[0] }}
    tags:
      - moinlm

  - name: install moinlm to virtualenv
    pip: virtualenv={{ VENV }} name={{ SRC_DIR }}/{{ TARBALL.stdout_lines[0] }}
    tags:
      - moinlm
    notify:
      - restart apache

  - name: register file name of zipfile containing wiki pages
    local_action: "shell basename $(ls -t dist/*pages.zip | head -1)"
    register: PAGES
    become: no
    tags:
      - pages

  - name: upload zipfile containing wiki pages
    copy: src=../dist/{{ PAGES.stdout_lines[0] }}
          dest={{ DATA_DIR }}/underlay/pages/LanguageSetup/attachments/{{ PAGES.stdout_lines[0] }}
          owner={{ WWW_USER }} group={{ WWW_USER }} mode=664
    tags:
      - pages

  # moinlm is imported in farmconfig, so must be installed before this step
  - name: create xapian index
    command: "{{ VENV }}/bin/moin
             --config-dir={{ DATA_DIR }}
             --wiki-url=http://{{ SERVER_NAME }}/{{item}}/
             index build --mode=rebuild"
    with_items: "{{ WIKI_NAMES }}"
    notify:
      - fix ownership of data dirs
      - restart apache

  - name: create a superuser account
    command: "{{ VENV }}/bin/moin
             --config-dir={{ DATA_DIR }}
             --wiki-url=http://{{ SERVER_NAME }}/sandbox/
             account create
             --name={{ MOIN_SU_NAME }}
             --password={{ MOIN_SU_PASSWORD }}
             --email=superuser@nowhere.com"
    notify:
      - fix ownership of data dirs

  handlers:
  # ownership of data dirs must match WSGIDaemonProcess
  - name: fix ownership of data dirs
    file: path={{ DATA_DIR }} state=directory mode=u+rw recurse=yes
          owner={{ WWW_USER }} group={{ WWW_USER }}

  - name: enable sites
    command: a2ensite {{ item }}
    with_flattened:
      - "{{ WIKI_NAMES }}"
      - "{{ SITE }}"

  - name: restart apache
    service: name=apache2 state=restarted
